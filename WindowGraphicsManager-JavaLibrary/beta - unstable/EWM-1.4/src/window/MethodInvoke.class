package window;

import java.awt.Graphics;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MethodInvoke {
	public Object parent;
	public String path;
	public Method method;
	public int error = 0;
	
	// CONSTRUCTOR
	protected MethodInvoke(String path, Object parent) {
		this.parent = parent;
		this.path = path;
	}
	
	// PUBLIC
	public void invoke(Graphics param) {
		if(error != 0)
			return;
		try {
			if(method == null) {
				String className = path.substring(0, path.lastIndexOf("."));
				String methodName = path.substring(path.lastIndexOf(".") + 1);
				Class<?> c = Class.forName(className);
				if(param != null)
					method = c.getMethod(methodName, Graphics.class);
				else method = c.getMethod(methodName);
			}
			if(param != null)
				method.invoke(parent, param);
			else method.invoke(parent);
		} catch (SecurityException | IllegalAccessException	| 
				IllegalArgumentException | InvocationTargetException | 
				ClassNotFoundException | NoSuchMethodException e) {
			error = 1;
		} catch(StringIndexOutOfBoundsException | NullPointerException e) {
			error = 2;
		}
	}
}
